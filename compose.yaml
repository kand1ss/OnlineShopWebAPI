services:
  
  nginx:
    build:
      context: .
      dockerfile: gateway/nginx/Dockerfile
    ports:
      - "443:443"
    depends_on:
      - catalog-gateway
      - account-gateway
  
  rabbitmq-server:
    image: rabbitmq:4.0-management
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics check_running" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
  
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
  
  catalog-gateway:
    image: catalog-gateway
    build:
      context: .
      dockerfile: gateway/CatalogGateway/Dockerfile
    environment:
      - RABBITMQ_HOST=rabbitmq-server
    depends_on:
      - rabbitmq-server
    restart: unless-stopped
    
  account-gateway:
    image: account-gateway
    build:
      context: .
      dockerfile: gateway/AccountGateway/Dockerfile
    environment:
      - RABBITMQ_HOST=rabbitmq-server
    depends_on:
      - rabbitmq-server
    restart: unless-stopped
    
  catalog-management-service:
    image: catalog-management-service
    build:
      context: .
      dockerfile: services/CatalogManagementService/Dockerfile
    environment:
      - RABBITMQ_HOST=rabbitmq-server
    depends_on:
      - rabbitmq-server
      - postgres
    restart: unless-stopped
    
  account-management-service:
    image: account-management-service
    build:
      context: .
      dockerfile: services/AccountManagementService/Dockerfile
    environment:
      - RABBITMQ_HOST=rabbitmq-server
    depends_on:
      - rabbitmq-server
      - postgres
    restart: unless-stopped
    
volumes:
  pg_data: